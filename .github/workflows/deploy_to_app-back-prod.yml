name: Deploy to app-back-prod

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version in Nexus'
        required: false
        default: 'latest'

jobs:
  build_deploy_to_dwh3:
    name: Build and deploy
    runs-on: [self-hosted, git-runner]
    timeout-minutes: 30
    env:
      CONTAINER_NAME: "egts-receiver-time"
      CONTAINER_PORT: "6000"
      HOST: "0.0.0.0"
      PORT: "6000"
      CONN_LIVE_SEC: "10"
      LOG_LEVEL: "DEBUG"
      DOCKER_CONTEXT: "app-back-prod"
      IMAGE_NAME: "egts-receiver"

    steps:
      - name: Check for actual
        uses: actions/checkout@v4

      - name: Switch to Docker context
        run: docker context use ${{ env.DOCKER_CONTEXT }}
      
      - name: Login
        run: |
          docker login ${{ secrets.FQDN_NEXUS }}:${{ secrets.NEXUS_PORT }} -u ${{ secrets.NEXUS_REGISTRY_RW }} -p ${{ secrets.NEXUS_REGISTRY_RW_PASSWORD }}

      - name: Pull version
        run: | 
          docker pull ${{ secrets.FQDN_NEXUS }}:${{ secrets.NEXUS_PORT }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.version || 'latest' }} || \
          (echo "Your version not found, latest will be used" && docker pull ${{ secrets.FQDN_NEXUS }}:${{ secrets.NEXUS_PORT }}/${{ env.IMAGE_NAME }}:latest)

      - name: Stop previous
        run: >
          CONTAINER_EXISTS=$(docker ps -a --format '{{.Names}}' --filter "name=${{ env.CONTAINER_NAME }}" -a | wc -w);
          if  [[ $CONTAINER_EXISTS != 0 ]] ;
          then docker container stop ${{ env.CONTAINER_NAME }};
          docker container rm ${{ env.CONTAINER_NAME }};
          else echo "Container ${{ env.CONTAINER_NAME }} does not exist";
          fi

      - name: Run container
        run: >
          docker run
          --restart unless-stopped
          --name ${{ env.CONTAINER_NAME }}
          -v /etc/hosts:/etc/hosts
          -v ./configs/receiver.yaml:/etc/egts-receviver/config.yaml
          -p ${{ env.CONTAINER_PORT }}:${{ env.PORT }}
          -e LOG_LEVEL=${{ env.LOG_LEVEL }}
          -e HOST=${{ env.HOST }}
          -e PORT=${{ env.PORT }}
          -e CONN_LIVE_SEC=${{ env.CONN_LIVE_SEC }}
          -d
          ${{ secrets.FQDN_NEXUS }}:${{ secrets.NEXUS_PORT }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.version || 'latest' }}

      - name: Perform cleanup
        run: docker system prune -f
