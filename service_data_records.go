package main

// type ServiceDataRecord []byte
type ServiceDataRecord struct {
	// Параметр определяет размер данных из поля RD (Record Data)
	// RecordLength, USHORT, 2
	RL uint

	// Номер записи. Значения в данном поле изменяются по правилам циклического
	// счётчика в диапазоне от 0 до 65535, т.е. при достижении значения 65535,
	// следующее значение должно быть 0. Значение из данного поля используется
	// для подтверждения записи
	// Record Number, USHORT, 2
	RN uint

	// Cодержит битовые флаги, определяющие наличие в данном пакете полей
	// OID, EVID и TM, характеризующих содержащиеся в записи данные
	// Record Flags, BYTE, 1
	RFL byte

	// Битовый флаг, определяющий расположение Сервиса-отправителя
	// 1 = Сервис-отправитель расположен на стороне АТ
	// 0 = Сервис- отправитель расположен на ТП
	// Source Service On Device, BYTE, 1
	SSOD byte

	// Битовый флаг, определяющий расположение Сервиса-получателя
	// 1 = Сервис-получатель расположен на стороне АТ
	// 0 = Сервис-получатель расположен на ТП
	// Recipient Service On Device, BYTE, 1
	RSOD byte

	// Битовый флаг, определяющий принадлежность передаваемых данных определённой группе, идентификатор которой указан в поле OID
	// 1 = данные предназначены для группы
	// 0 = принадлежность группе отсутствует
	// Group, BYTE, 1
	GRP byte

	// Битовое поле, определяющее приоритет обработки данной записи Сервисом
	// 00 – наивысший 01 – высокий
	// 10 – средний
	// 11 – низкий
	// Record Processing Priority, BYTE, 1
	RPP byte

	// Битовое поле, определяющее наличие в данном пакете поля TM
	// 0 = поле TM отсутствует
	// 1 = поле TM присутствует
	// Time Field Exists, BYTE, 1
	TMFE byte

	// Битовое поле, определяющее наличие в данном пакете поля EVID
	// 1 = поле EVID присутствует
	// 0 = поле EVID отсутствует
	// Event ID Field Exists, BYTE, 1
	EVFE byte

	// Битовое поле, определяющее наличие в данном пакете поля OID
	// 1 = поле OID присутствует
	// 0 = поле OID отсутствует
	// Object ID Field Exists, BYTE, 1
	OBFE byte

	// Идентификатор объекта, сгенерировавшего данную запись,
	// или для которого данная запись предназначена (уникальный идентификатор АТ),
	// либо идентификатор группы (при GRP=1). При передаче от АТ в одном
	// Пакете Транспортного Уровня нескольких записей подряд
	// для разных сервисов, но от одного и того же объекта,
	// поле OID может присутствовать только в первой записи,
	// а в последующих записях может быть опущено.
	// Object Identifier, UINT, 4
	OID int

	// Уникальный идентификатор события. Поле EVID задаёт некий глобальный
	// идентификатор события и применяется, когда необходимо логически связать
	// с одним единственным событием набор нескольких информационных сущностей,
	// причём сами сущности могут быть разнесены как по разным информационным
	// пакетам, так и по времени. При этом прикладное ПО имеет возможность
	// объединить все эти сущности воедино в момент представления пользователю
	// информации о событии. Например, если с нажатием тревожной кнопки связывается
	// серия фотоснимков, поле EVID должно указываться в каждой сервисной записи,
	// связанной с этим событием на протяжении передачи всех сущностей, связанных
	// с данным событием, как бы долго не длилась передача всего пула информации.
	// Event Identifier, UINT, 4
	EVID int

	// Время формирования записи на стороне Отправителя (секунды с 00:00:00 01.01.2010 UTC).
	// Если в одном Пакете Транспортного Уровня передаются несколько записей,
	// относящихся к одному объекту и моменту времени, то поле метки времени
	// TM может передаваться только в составе первой записи.
	// Time, UINT, 4
	TM int

	// Идентификатор тип Сервиса-отправителя, сгенерировавшего данную запись.
	// Например, Сервис, обрабатывающий навигационные данные на стороне АТ,
	// Сервис команд на стороне ТП и т.д.
	// Source Service Type, BYTE, 1
	SST byte

	// Идентификатор тип Сервиса-получателя данной записи.
	// Например, Сервис, обрабатывающий навигационные данные на стороне ТП,
	// Сервис обработки команд на стороне АТ и т.д.
	// Recipient Service Type, BYTE, 1
	RST byte

	// Поле, содержащее информацию, присущую определённому типу
	// Сервиса (одну или несколько подзаписей Сервиса типа,
	// указанного в поле SST или RST, в зависимости от вида
	// передаваемой информации).
	// Record Data, Binary, 3...65498
	RD []byte
}

type ServiceDataSubrecord struct {
	// Тип подзаписи (подтип передаваемых данных в рамках общего набора типов
	// одного Сервиса). Тип 0 – специальный, зарезервирован за подзаписью
	// подтверждения данных для каждого сервиса. Конкретные значения номеров т
	// ипов подзаписей определяются логикой самого Сервиса. Протокол оговаривает
	// лишь то, что этот номер должен присутствовать, а нулевой
	// идентификатор зарезервирован.
	// Subrecord Type, BYTE, 1
	SRT byte

	// Длина данных в байтах подзаписи в поле SRD
	// Subrecord Length, USHORT, 2
	SRL int

	// Данные подзаписи. Наполнение данного поля специфично для каждого
	// сочетания идентификатора Сервиса и типа подзаписи
	// Subrecord Data, BINARY, 0...65945
	SRD []byte
}

type EGTS_PT_APPDATA struct {
	// Структуры, содержащие информацию Протокола Уровня Поддержки Услуг.
	// Таких структур в составе поля SFRD пакета Транспортного Уровня может быть одна или несколько,
	// идущих одна за другой. Описание внутреннего состава структур представлено в
	// документе “Терминал ЭРА ГЛОНАСС, Протокол Обмена Данными, Уровень Поддержки Услуг” и
	// перечне спецификаций на отдельные сервисы.
	SDR []ServiceDataRecord
}

type EGTS_PT_RESPONSE struct {
	// Идентификатор пакета Транспортного Уровня, подтверждение на который сформировано.
	RPID uint16

	// Код результата обработки части Пакета, относящейся к Транспортному Уровню
	// (подсчёт контрольных сумм заголовка Транспортного Уровня и данных Уровня Поддержки Услуг,
	// проверка размера пакета, определение необходимости дальнейшей маршрутизации Пакета и т.д.).
	// Список возможных кодов результата обработки представлен в Приложении 1.
	PR byte

	// Структуры, содержащие информацию Уровня Поддержки Услуг. Таких структур может быть одна или
	// несколько, идущих одна за другой.
	SDR []ServiceDataRecord
}

type EGTS_PT_SIGNED_APPDATA struct {
	// Определяет длину данных «цифровой подписи» из поля SIGD.
	SIGL uint16

	// Содержит непосредственно данные «цифровой подписи».
	SIGD []byte

	// Структуры, содержащие информацию Уровня Поддержки Услуг.
	// Таких структур может быть одна или несколько, идущих одна за другой.
	SDR []ServiceDataRecord
}

type EGTS_SR_RECORD_RESPONSE struct {
	// Подзапись применяется для осуществления подтверждения процесса
	// обработки записи Протокола Уровня Поддержки Услуг.
	// Данный тип подзаписи должен поддерживаться всеми Сервисами.
	CRN int
	RST byte
}
